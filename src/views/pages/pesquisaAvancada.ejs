<!DOCTYPE html>
<html lang="pt-BR">

<%- include('../partials/head', { title: 'Pesquisa Avançada' }) %>

  <style>
    * {
      margin: 0;
      padding: 0;
    }

    body {
      display: flex;
      align-items: center;
      padding-top: 2.5rem;
    }

    .modal.fade .modal-dialog {
      transition: transform 1s ease-in-out, opacity 5s ease-in-out;
      transform: translateY(-25%);
      opacity: 0;
    }

    .modal.show .modal-dialog {
      transform: translateY(0);
      opacity: 1;
    }

    body {
      display: flex;
      align-items: center;
    }

    .w-90 {
      width: 15%;
      margin-block: 1rem;
    }
  </style>


  <body>
    <%- include('../partials/header') %>
      <div class="caixa container p-4 w-50">
        <div class=" border caixa-externa p-4 shadow-sm rounded">
          <div class="table-container">
            <div class="row mt-0">
              <div class="col-md-12">
                <h2 style="border-bottom: 4px solid orange;"
                  class="text-center text-white py-2 mt-0 fw-bold bg-success">Pesquisa Avançada de Estoque</h2>
                <form id="pesquisa-form">
                  <div class="row">
                    <div class="col-md-12 mb-3">
                      <div class="form-group fw-bold mt-3"> <label for="descricao">Descrição:</label> <input type="text"
                          id="descricao" name="descricao" class="form-control my-2"> </div>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-4 mb-1">
                      <div class="form-group"> <label class="form-label fw-bold" for="categoria">Categoria</label>
                        <select id="categoria" class="form-select" name="categoria">
                          <option selected></option>
                          <option value="mesa">MESA</option>
                          <option value="ar-condicionado">AR-CONDICIONADO</option>
                          <option value="automovel">AUTOMÓVEL</option>
                          <option value="bicicleta">BICICLETA</option>
                          <option value="tv">TV</option>
                          <option value="cadeira">CADEIRA</option>
                          <option value="gaveteiro">GAVETEIRO</option>
                          <option value="armario">ARMÁRIO</option>
                          <option value="estante">ESTANTE</option>
                          <option value="desktop">DESKTOP</option>
                          <option value="arquivo">ARQUIVO</option>
                          <option value="beliche">BELICHE</option>
                          <option value="lousa">LOUSA</option>
                          <option value="monitor">MONITOR</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-md-4">
                      <div class="form-group fw-bold"> <label for="tombo">Tombo:</label> <input type="text" id="tombo"
                          name="tombo" class="form-control mt-2"> </div>
                    </div>
                    <div class="col-md-4">
                      <div class="form-group fw-bold"> <label for="data">Ano:</label> <input type="number" id="data"
                          name="data" class="form-control mt-2" placeholder="Ex: 2025"> </div>
                    </div>
                  </div>
              </div>
              <div class="row">
                <div class="col-md-12 d-flex justify-content-center mt-4">
                  <button type="button" class="w-90 btn btn-warning mx-1" id="btn-limpar">Limpar</button>
                  <button type="submit" class="w-90 btn btn-secondary mx-1" id="btn-pesquisar">Pesquisar</button>
                </div>
              </div>
              </form>
              <div class="row">
                <div class="col-md-12 d-flex justify-content-center">
                  <div id="resultados" class="mt-2"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      </div>

      <script>
        document.addEventListener('DOMContentLoaded', () => {
          const subgrupoSelect = document.getElementById('subgrupo');

          if (subgrupoSelect) {
            subgrupoSelect.addEventListener('change', async (e) => {
              const subgrupo = e.target.value;
              console.log("Subgrupo selecionado pelo usuário:", subgrupo);

              if (!subgrupo) {
                return;
              }

              try {
                const response = await fetch(`/fetch-itens-nao-pagos-subgrupo?subgrupo=${subgrupo}`);
                const data = await response.json();
                console.log("Dados recebidos do backend para itens não pagos por subgrupo:", data);

                const resultadosDiv = document.getElementById('resultados');
                resultadosDiv.innerHTML = `<h5 class="text-primary text-center">Quantidade de Itens Não Pagos no Subgrupo ${subgrupo}: ${data.quantidadeNaoPagos}</h5>`;
              } catch (error) {
                console.error("Erro ao buscar itens não pagos por subgrupo:", error);
                const resultadosDiv = document.getElementById('resultados');
                resultadosDiv.innerHTML = '<h5 class="text-danger mt-2">Erro ao buscar itens não pagos.</h5>';
              }
            });
          }

          const categoriaSelect = document.getElementById('categoria');

          if (categoriaSelect) {
            categoriaSelect.addEventListener('change', async (e) => {
              const categoria = e.target.value;
              console.log("Categoria selecionada pelo usuário:", categoria);

              if (!categoria) {
                return;
              }

              try {
                const response = await fetch(`/fetch-itens-nao-pagos?categoria=${categoria}`);
                const data = await response.json();
                console.log("Dados recebidos do backend para itens não pagos:", data);

                const resultadosDiv = document.getElementById('resultados');
                resultadosDiv.innerHTML = `<h5 class="text-primary text-center">Quantidade de Itens em estoque na Categoria ${categoria}: ${data.quantidadeNaoPagos}</h5>`;
              } catch (error) {
                console.error("Erro ao buscar itens não pagos por categoria:", error);
                const resultadosDiv = document.getElementById('resultados');
                resultadosDiv.innerHTML = '<h5 class="text-danger mt-2">Erro ao buscar itens não pagos.</h5>';
              }
            });
          }
        });

        document.addEventListener('DOMContentLoaded', () => {

          // Função para tratar o campo de pesquisa por descrição
          const descricaoInput = document.getElementById('descricao');
          if (descricaoInput) {
            descricaoInput.addEventListener('input', async (e) => {
              const valor = e.target.value;
              console.log("Valor de pesquisa digitado:", valor);

              if (!valor) {
                return;
              }

              try {
                const response = await fetch(`/pesquisa-similaridade?valor=${valor}`);
                const data = await response.json();
                console.log("Dados recebidos do backend para pesquisa por similaridade:", data);

                const resultadosDiv = document.getElementById('resultados');
                resultadosDiv.innerHTML = `
        <h5 class="text-primary text-center">Quantidade de Itens no Estoque com Descrição Similar: ${data.quantidadeNoEstoque}</h5>
        <h5 class="text-primary text-center">Quantidade de Itens Pagos com Descrição Similar: ${data.quantidadePagos}</h5>
      `;
              } catch (error) {
                console.error("Erro na pesquisa por similaridade:", error);
                const resultadosDiv = document.getElementById('resultados');
                resultadosDiv.innerHTML = '<h5 class="text-danger mt-2">Erro ao buscar itens por similaridade.</h5>';
              }
            });
          }
        });

      </script>

      <script>
        document.addEventListener('DOMContentLoaded', () => {
          const pesquisaForm = document.getElementById('pesquisa-form');
          const resultadosDiv = document.getElementById('resultados');

          if (pesquisaForm) {
            pesquisaForm.addEventListener('submit', async (e) => {
              e.preventDefault();
              const formData = new FormData(e.target);
              const params = new URLSearchParams(formData).toString();
              console.log("Parâmetros da URL:", params);

              try {
                const response = await fetch(`/pesquisa-avancada?${params}`);
                const data = await response.json();
                console.log("Dados recebidos do backend:", data);

                const ano = formData.get('data');
                const categoria = formData.get('categoria');
                const subgrupo = formData.get('subgrupo');
                console.log("Ano:", ano, "Categoria:", categoria, "Subgrupo:", subgrupo);

                let mensagem = '';

                if (ano) {
                  mensagem += `<h5 class="text-primary text-center">Quantidade de Itens que Entraram - Ano ${ano}: ${data.quantidadeEntraram}<br/> Quantidade de Itens que Saíram - Ano ${ano}: ${data.quantidadeSaidos}</h5>`;
                }
                if (categoria) {
                  const quantidadeCategoria = data.quantidadeNoEstoque || 0;
                  console.log('Quantidade no estoque para a categoria:', categoria, 'é', quantidadeCategoria);
                  mensagem += `<h5 class="text-primary text-center">Itens no estoque da Categoria ${categoria}: ${quantidadeCategoria}</h5>`;
                }
                if (subgrupo) {
                  const quantidadeSubgrupo = data.quantidadeNoEstoque || 0;
                  console.log('Quantidade no estoque para o subgrupo:', subgrupo, 'é', quantidadeSubgrupo);
                  mensagem += `<h5 class="text-primary text-center">Itens no estoque do Subgrupo ${subgrupo}: ${quantidadeSubgrupo}</h5>`;
                }

                resultadosDiv.innerHTML = mensagem;

              } catch (error) {
                console.error("Erro ao buscar resultados:", error);
                resultadosDiv.innerHTML = '<h5 class="text-danger mt-2">Erro ao buscar resultados.</h5>';
              }
            });
          }

          const btnLimpar = document.getElementById('btn-limpar');
          if (btnLimpar) {
            btnLimpar.addEventListener('click', () => {
              document.getElementById('pesquisa-form').reset();
              resultadosDiv.innerHTML = '';
            });
          }
        });
      </script>

    <script>
      // Manipulação de Tombo e Modal /////////////////////////////////////////////
      document.addEventListener('DOMContentLoaded', () => {
        const pesquisaForm = document.getElementById('pesquisa-form');
        const resultadosDiv = document.getElementById('resultados');

        if (pesquisaForm) {
          pesquisaForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const tombo = formData.get('tombo');

            if (tombo) {
              try {
                const responseTombo = await fetch(`/fetch-info-tombo?tombo=${tombo}`);
                const dataTombo = await responseTombo.json();
                console.log("Dados do tombo recebidos do backend:", dataTombo);

                if (dataTombo.infoTombo) {
                  const entrada = dataTombo.infoTombo;
                  const saida = dataTombo.infoSaida; // Corrigido para usar infoSaida

                  const dataEntradaFormatada = new Date(entrada.data_de_entrada).toLocaleDateString('pt-BR');
                  const dataSaidaFormatada = saida ? new Date(saida.data_de_saida).toLocaleDateString('pt-BR') : '';

                  const getObservacao = (data) => data && data.observacao ? data.observacao : "N/A";
                  const valorReal = (valor) => parseFloat(valor).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });

                  const modalHtml = `
                    <div class="modal fade show" id="infoTomboModal" tabindex="-1" aria-labelledby="infoTomboModalLabel" aria-hidden="true">
                      <div class="modal-dialog modal-dialog-centered" style="transform: scale(1);">
                        <div class="modal-content">
                          <div class="modal-header bg-success text-white d-flex justify-content-between">
                            <h3 class="modal-title ms-3" id="infoTomboModalLabel">Informações do Tombo</h3>
                            <button type="button" class="btn text-white" data-bs-dismiss="modal" aria-label="Close">
                              <i class="fa fa-times fa-lg"></i>
                            </button>
                          </div>
                          <div class="modal-body">
                            <div class="card">
                              <div class="card-body pb-0">
                                <h5 class="card-title">${entrada.descricao}</h5>
                                <p class="card-text">
                                  <h5 class="bg-primary text-white p-2">Dados da Entrada</h5>
                                  <strong>Tombo:</strong> ${entrada.tombo} <br/>
                                  <strong>Data de Entrada:</strong> ${dataEntradaFormatada} <br/>
                                  <strong>Categoria:</strong> ${entrada.categoria} <br/>
                                  <strong>Doc Origem:</strong> ${entrada.doc_origem} <br/>
                                  <strong>Estoque:</strong> ${entrada.estoque} <br/>
                                  <strong>Valor:</strong> ${valorReal(entrada.valor)} <br/>
                                  <strong>Situação:</strong> ${entrada.situacao} <br/>
                                  <strong>Observação:</strong> ${getObservacao(entrada)} <br/>
                                  <hr>
                                  ${entrada.pago === 1 ? (saida ? `
                                    <h5 class="bg-danger text-white p-2">Dados da Saída</h5>
                                    <strong>Data de Saída:</strong> ${dataSaidaFormatada} <br/>
                                    <strong>Doc Saída:</strong> ${saida.doc_saida} <br/>
                                    <strong>Referência:</strong> ${saida.referencia} <br/>
                                    <strong>Destino:</strong> ${saida.destino.toUpperCase()} <br/>
                                    <strong>Posto/Graduação:</strong> ${saida.posto_graduacao.toUpperCase()} <br/>
                                    <strong>Matrícula Funcional:</strong> ${saida.mat_funcional} <br/>
                                    <strong>Telefone:</strong> ${saida.telefone} <br/>
                                    <strong>Nome Completo:</strong> ${saida.nome_completo.toUpperCase()} <br/>
                                    <strong>Observação de Saída:</strong> ${getObservacao(saida).toUpperCase()} <br/>` : `
                                    <h5 class="bg-secondary text-white p-2">Item foi dado como pago, mas não há detalhes de saída.</h5>`) : `
                                    <h5 class="bg-secondary text-white p-2">Item consta no estoque, ainda não foi pago.</h5>`}
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  `;

                  const modalDiv = document.createElement('div');
                  modalDiv.innerHTML = modalHtml;
                  document.body.appendChild(modalDiv);

                  const infoTomboModal = new bootstrap.Modal(document.getElementById('infoTomboModal'), {
                    backdrop: true,
                    focus: true
                  });

                  const modalDialog = document.querySelector('.modal-dialog');
                  modalDialog.classList.add('modal-zoom-in');

                  infoTomboModal.show();
                  infoTomboModal._element.addEventListener('hidden.bs.modal', () => {
                    document.getElementById('pesquisa-form').reset();
                    resultadosDiv.innerHTML = '';
                    modalDiv.remove();
                  });
                } else {
                  alert('Desculpe, mas esse tombo é inválido ou ainda não foi cadastrado, tente novamente.');
                  document.getElementById('pesquisa-form').reset();
                  resultadosDiv.innerHTML = '';
                }
              } catch (error) {
                console.error("Erro ao buscar informações do tombo:", error);
                alert('Erro ao buscar informações do tombo.');
                document.getElementById('pesquisa-form').reset();
                resultadosDiv.innerHTML = '';
              }
            }
          });
        }
      });
    </script>
  </body>
</html>