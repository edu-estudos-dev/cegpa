<!DOCTYPE html>
<html lang="pt-BR">

<%- include('../partials/head', { title: 'Estoque Atual' }) %>

<style>
   * {
      margin: 0;
      padding: 0;
   }

   body {
      padding-top: 2.5rem;
   }

   .botoes {
      margin-bottom: 1.9rem;
   }

   .table-container {
      max-height: 75vh;
      overflow-y: auto;
      overflow-x: hidden;
      min-height: 75vh;
      padding-top: 0; /* Remove padding extra no topo, se necessário */
   }

   .table-container table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
   }

   .table-container th,
   .table-container td {
      word-wrap: break-word;
      white-space: nowrap;
      border: none !important;
   }

   .table-container thead th {
      position: sticky;
      top: 61px; /* Ajuste este valor conforme a altura da barra de pesquisa */
      background-color: rgb(231, 161, 9);
      color: white;
      border-left: 1px solid white !important;
      border-right: none !important;
      border-top: none !important;
      border-bottom: 1px solid white !important;
      z-index: 1;
   }

   .search-bar {
      position: sticky;
      top: 0;
      background-color: #fff; /* Fundo branco para evitar transparência */
      z-index: 2; /* Fica acima do cabeçalho da tabela (z-index: 1) */
      padding: 10px 0; /* Espaçamento interno para melhor estética */
   }

   .table-container thead th:last-child {
      border-right: none !important;
   }

   .btn-details,
   .btn-edit,
   .btn-delete {
      width: 70px; 
   }

   .modal.fade .modal-dialog {
      transition: transform 0.25s ease-in-out, opacity 0.25s ease-in-out;
      transform: translateY(-10%);
      opacity: 0;
   }

   .modal.show .modal-dialog {
      transform: translateY(0);
      opacity: 1;
   }

   .w-90 {
      width: 90% !important;
   }

   /* Ajuste das colunas */
   .table-container th:nth-child(1), /* ID */
   .table-container td:nth-child(1) {
      width: 4%;
   }

   .table-container th:nth-child(2), /* Data de entrada */
   .table-container td:nth-child(2) {
      width: 6%;
   }

   .table-container th:nth-child(3), /* Descrição */
   .table-container td:nth-child(3) {
      width: 20%;
   }

   .table-container th:nth-child(4), /* tombo */
   .table-container td:nth-child(4) {
      width: 7%;
   }

   .table-container th:nth-child(5), /* Categoria */
   .table-container td:nth-child(5) {
      width: 10%;
   }

   .table-container th:nth-child(6), /* Estoque */
   .table-container td:nth-child(6) {
      width: 7%;
   }

   .table-container th:nth-child(7), /* Conservação */
   .table-container td:nth-child(7) {
      width: 7%;
   }

   .table-container th:nth-child(8), /* Doc. de Origem */
   .table-container td:nth-child(8) {
      width: 8%;
   }

   .table-container th:nth-child(9), /* Valor */
   .table-container td:nth-child(9) {
      width: 7%;
   }

   .table-container th:last-child, /* Ações */
   .table-container td:last-child {
      width: 10%;
   }

   /* Adicionando transição para a exibição */
   .table-container #estoqueTable tbody tr {
      transition: opacity 0.3s ease;
   }

   /* Estilo para linhas ocultas */
   .table-container #estoqueTable tbody tr.hidden {
      display: none;
      opacity: 0;
   }

   /* Estilo para cabeçalhos ordenáveis */
   .sortable {
      cursor: pointer;
      position: relative;
      padding-right: 30px; /* Mais espaço para duas setas */
   }

   /* Define as duas setas (cima e baixo) */
   .sortable::before,
   .sortable::after {
      content: '';
      position: absolute;
      right: 5px;
      width: 0;
      height: 0;
      border-left: 6px solid transparent;
      border-right: 6px solid transparent;
      opacity: 0.7;
      transition: opacity 0.3s ease, border-color 0.3s ease;
   }

   .sortable::before {
      border-bottom: 6px solid #ffffff; /* Seta para cima, branca */
      top: 8px;
   }

   .sortable::after {
      border-top: 6px solid #ffffff; /* Seta para baixo, branca */
      bottom: 8px;
   }

   .sortable:hover::before,
   .sortable:hover::after {
      opacity: 1;
   }

   .sort-asc::before {
      border-bottom-color: #122dc4; /* Azul para ascendente */
      opacity: 1;
   }
   .sort-asc::after {
      opacity: 0.7;
   }

   .sort-desc::after {
      border-top-color: #d40a0a; /* Vermelho para descendente */
      opacity: 1;
   }
   .sort-desc::before {
      opacity: 0.7;
   }

   @media (max-width: 1024) {
      .caixa-externa {
         background-color: #d40a0a;
      }
   }
</style>

<body>
   <%- include('../partials/header') %>
   <div class="caixa p-4 mx-auto">
      <div class="border caixa-externa p-4 shadow-sm rounded">
         <div class="row align-items-center mb-3 px-3">
            <div class="col d-flex justify-content-between align-items-center bg-success py-2 rounded"
               style="border-bottom: 4px solid orange;">
               <h2 class="text-white mt-0 fw-bold flex-grow-1 text-center">Estoque Geral</h2>
               <div class="d-flex align-items-center">
                  <label for="formato" class="text-white me-2">Formato:</label>
                  <select id="formato" class="form-select form-select-sm me-2" style="width: auto;">
                     <option value="pdf">PDF</option>
                     <option value="excel">Excel</option>
                  </select>
                  <a href="#" id="exportarBtn" class="btn btn-outline-light btn-header fw-bold">Gerar Relatório</a>
               </div>
            </div>
         </div>

         <div class="table-container">
            <div class="search-bar sticky-top">
               <div style="background-color: transparent;" class="d-flex justify-content-end align-items-center mb-2">
                  <label for="searchTombo" class="me-2 fw-bold">Pesquisar:</label>
                  <input type="text" id="searchTombo" placeholder="Digite o número do tombo, categoria, descrição, doc de origem ou conservação" style="width: 520px; padding: 5px; border: 1px solid #ccc; border-radius: 4px; margin-right: 10px;">
                  <button id="clearSearch" class="btn btn-secondary btn-md me-2">Limpar</button>
               </div>
            </div>
            <table id="estoqueTable" class="table table-striped table-hover mb-0">
               <thead class="thead-success">
                  <tr class="table-borderless">
                     <th class="text-center table-borderless px-0 sortable" data-col="0">ID</th>
                     <th class="text-center table-borderless px-0 sortable" data-col="1">Entrada</th>
                     <th class="ps-4 table-borderless px-0 sortable" data-col="2">Descrição</th>
                     <th class="text-center table-borderless px-0 sortable" data-col="3">Tombo</th>
                     <th class="text-center table-borderless px-0">Categoria</th>
                     <th class="text-center table-borderless px-0">Estoque</th>
                     <th class="text-center table-borderless px-0">Conservação</th>
                     <th class="text-center table-borderless px-0">Doc de Origem</th>
                     <th class="text-center table-borderless px-0">Valor</th>
                     <th class="text-center table-borderless px-0">Ações</th>
                  </tr>
               </thead>
               <tbody>
                  <% if (estoque.length > 0) { %>
                     <% estoque.forEach(function(item) { %>
                        <tr>
                           <td class="py-1 align-middle text-center"><%= item.id %></td>
                           <td class="py-1 align-middle text-center"><%= new Date(item.data_de_entrada).toLocaleDateString('pt-BR') %></td>
                           <td class="py-1 align-middle"><%= item.descricao %></td>
                           <td class="py-1 align-middle text-center"><%= item.tombo %></td>
                           <td class="py-1 align-middle text-center"><%= item.categoria %></td>
                           <td class="py-1 align-middle text-center"><%= item.estoque %></td>
                           <td class="py-1 align-middle text-center"><%= item.situacao %></td>
                           <td class="py-1 align-middle text-center"><%= item.doc_origem %></td>
                           <td class="py-1 align-middle text-center valor-cell" data-valor="<%= item.valor %>"><%= item.valor %></td>
                           <td class="py-1 align-middle text-center">
                              <button type="button" class="btn btn-secondary btn-sm btn-details" data-id="<%= item.id %>">Detalhes</button>
                              <a href="/editar/<%= item.id %>" class="btn btn-warning btn-sm btn-edit">Editar</a>
                              <a href="/excluir/<%= item.id %>" class="btn btn-danger btn-sm btn-delete">Excluir</a>
                           </td>
                        </tr>
                     <% }); %>
                  <% } else { %>
                     <tr>
                        <td colspan="10" class="text-center align-middle">Ainda não há itens cadastrados</td>
                     </tr>
                  <% } %>
               </tbody>
            </table>
         </div>
      </div>
   </div>

   <script>
      // Passa o role do usuário do backend para o JavaScript
      const userRole = '<%= userRole %>';

      document.addEventListener('DOMContentLoaded', () => {
         // Função para formatar valores no padrão de moeda brasileira
         const formatarMoeda = (valor) => {
            return parseFloat(valor).toLocaleString('pt-BR', {
               style: 'currency',
               currency: 'BRL'
            });
         };

         // Formata os valores na coluna "Valor"
         const valorCells = document.querySelectorAll('.valor-cell');
         valorCells.forEach(cell => {
            const valor = cell.getAttribute('data-valor');
            if (valor) {
               cell.textContent = formatarMoeda(valor);
            }
         });

         // Script para o botão "Detalhes"
         const viewButtons = document.querySelectorAll('.btn-details');
         viewButtons.forEach(button => {
            button.addEventListener('click', async (event) => {
               const itemId = event.target.getAttribute('data-id');
               const url = `/visualizar/${itemId}`; // Ajustado para remover o prefixo /estoque
               try {
                  const response = await fetch(url);
                  if (!response.ok) throw new Error(`Erro: ${response.status}`);
                  const item = await response.json();
                  const modalHtml = `
                     <div class="modal fade show" id="infoTomboModal" tabindex="-1" aria-labelledby="infoTomboModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                           <div class="modal-content">
                              <div class="modal-header bg-success text-white d-flex justify-content-between">
                                 <h3 class="modal-title ms-3" id="infoTomboModalLabel">Informações do Tombo</h3>
                                 <button type="button" class="btn text-white" data-bs-dismiss="modal" aria-label="Close">
                                    <i class="fa fa-times fa-lg"></i>
                                 </button>
                              </div>
                              <div class="modal-body">
                                 <div class="card">
                                    <div class="card-body pb-0">
                                       <h5 class="card-title">${item.descricao || 'N/A'}</h5>
                                       <p class="card-text">
                                          <h5 class="bg-primary text-white p-2">Dados da Entrada</h5>
                                          <strong>ID:</strong> ${item.id || 'N/A'} <br/>
                                          <strong>Tombo:</strong> ${item.tombo || 'N/A'} <br/>
                                          <strong>Data de Entrada:</strong> ${item.data_de_entrada || 'N/A'} <br/>
                                          <strong>Categoria:</strong> ${item.categoria || 'N/A'} <br/>
                                          <strong>Doc Origem:</strong> ${item.doc_origem || 'N/A'} <br/>
                                          <strong>Estoque:</strong> ${item.estoque || 'N/A'} <br/>
                                          <strong>Valor:</strong> ${formatarMoeda(item.valor) || 'N/A'} <br/>
                                          <strong>Situação:</strong> ${item.situacao || 'N/A'} <br/>
                                          <strong>Observação:</strong> ${item.observacao || 'N/A'} <br/>
                                       </p>
                                    </div>
                                 </div>
                              </div>
                           </div>
                        </div>
                     </div>`;
                  const modalDiv = document.createElement('div');
                  modalDiv.innerHTML = modalHtml;
                  document.body.appendChild(modalDiv);

                  const infoTomboModal = new bootstrap.Modal(document.getElementById('infoTomboModal'));
                  infoTomboModal.show();

                  infoTomboModal._element.addEventListener('hidden.bs.modal', () => {
                     modalDiv.remove();
                  });
               } catch (error) {
                  console.error('Erro ao buscar detalhes:', error);
                  alert('Erro ao carregar os detalhes do item.');
               }
            });
         });

         // Script para o botão "Exportar Relatório"
         const exportarBtn = document.getElementById('exportarBtn');
         exportarBtn.addEventListener('click', (event) => {
            event.preventDefault();
            const formato = document.getElementById('formato').value;
            window.location.href = `/relatorio/geral?formato=${formato}`; // Ajustado para remover /estoque
         });

         // Script para os botões "Editar" e "Excluir" com alerta para não-admin
         const editButtons = document.querySelectorAll('.btn-edit');
         const deleteButtons = document.querySelectorAll('.btn-delete');

         editButtons.forEach(button => {
            button.addEventListener('click', (event) => {
               console.log('userRole ao clicar em Editar:', userRole); // Adicionado para debug
               if (userRole !== 'admin') {
                  event.preventDefault();
                  alert('Você não tem permissão para editar itens. Apenas administradores podem realizar esta ação.');
               }
            });
         });

         deleteButtons.forEach(button => {
            button.addEventListener('click', async (event) => {
               if (userRole !== 'admin') {
                  event.preventDefault();
                  alert('Você não tem permissão para excluir itens. Apenas administradores podem realizar esta ação.');
               } else {
                  event.preventDefault();
                  const confirmation = confirm("Você tem certeza que deseja excluir este item? Esse processo é irreversível.");
                  if (!confirmation) return;

                  const url = event.target.href;
                  try {
                     const response = await fetch(url, { method: 'DELETE' });
                     const result = await response.json();
                     if (response.ok) {
                        alert('Item deletado com sucesso!');
                        location.reload();
                     } else {
                        alert(result.msg);
                     }
                  } catch (error) {
                     console.error('Erro ao deletar item:', error);
                     alert('Erro ao deletar o item');
                  }
               }
            });
         });

         // Script para pesquisa (permanece igual)
         document.getElementById('searchTombo').addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            filterRows(searchTerm);
         });

         document.getElementById('clearSearch').addEventListener('click', () => {
            document.getElementById('searchTombo').value = '';
            filterRows('');
         });

         function filterRows(searchTerm) {
            const table = document.getElementById('estoqueTable');
            const rows = table.getElementsByTagName('tr');
            for (let i = 1; i < rows.length; i++) {
               const cells = rows[i].getElementsByTagName('td');
               if (cells.length < 8) {
                  rows[i].classList.add('hidden');
                  continue;
               }
               const descricaoCell = cells[2].textContent.toLowerCase().trim();
               const tomboCell = cells[3].textContent.toLowerCase().trim();
               const categoriaCell = cells[4].textContent.toLowerCase().trim();
               const estoqueCell = cells[5].textContent.toLowerCase().trim();
               const conservacaoCell = cells[6].textContent.toLowerCase().trim();
               const docOrigemCell = cells[7].textContent.toLowerCase().trim();
               const matches = descricaoCell.includes(searchTerm) ||
                              tomboCell.includes(searchTerm) ||
                              categoriaCell.includes(searchTerm) ||
                              estoqueCell.includes(searchTerm) ||
                              conservacaoCell.includes(searchTerm) ||
                              docOrigemCell.includes(searchTerm);
               if (searchTerm === '' || matches) {
                  rows[i].classList.remove('hidden');
               } else {
                  rows[i].classList.add('hidden');
               }
            }
         }

         // Script para ordenação (permanece igual)
         const sortStates = {};
         function sortTable(columnIndex, isNumeric = false) {
            const table = document.getElementById('estoqueTable');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.getElementsByTagName('tr')).filter(row => !row.classList.contains('hidden'));
            const th = document.querySelector(`th[data-col="${columnIndex}"]`);
            const currentState = sortStates[columnIndex] || 'none';
            const newState = currentState === 'asc' ? 'desc' : 'asc';
            sortStates[columnIndex] = newState;

            document.querySelectorAll('.sortable').forEach(header => {
               header.classList.remove('sort-asc', 'sort-desc');
            });
            th.classList.add(newState === 'asc' ? 'sort-asc' : 'sort-desc');

            rows.sort((a, b) => {
               let aValue = a.cells[columnIndex].textContent.trim();
               let bValue = b.cells[columnIndex].textContent.trim();
               if (columnIndex === 0 || columnIndex === 3) {
                  aValue = parseInt(aValue) || 0;
                  bValue = parseInt(bValue) || 0;
                  return newState === 'asc' ? aValue - bValue : bValue - aValue;
               } else if (columnIndex === 1) {
                  const parseDate = (dateStr) => {
                     const [day, month, year] = dateStr.split('/').map(Number);
                     return new Date(year, month - 1, day);
                  };
                  const aDate = parseDate(aValue);
                  const bDate = parseDate(bValue);
                  return newState === 'asc' ? aDate - bDate : bDate - aDate;
               } else {
                  return newState === 'asc'
                     ? aValue.localeCompare(bValue, 'pt-BR')
                     : bValue.localeCompare(aValue, 'pt-BR');
               }
            });

            rows.forEach(row => tbody.appendChild(row));
         }

         document.querySelectorAll('.sortable').forEach(th => {
            th.addEventListener('click', () => {
               const columnIndex = parseInt(th.getAttribute('data-col'));
               sortTable(columnIndex);
            });
         });
      });
   </script>


</body>
</html>