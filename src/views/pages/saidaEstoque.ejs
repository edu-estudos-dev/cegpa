<!DOCTYPE html>
<html lang="pt-BR">

<%- include('../partials/head', { title: 'Formulário de Saída' }) %>

   <style>
      * {
         margin: 0;
         padding: 0;
      }

      body {
         display: flex;
         align-items: center;
         padding-top: 5.5rem;
      }


      #tombos-container,
      #selected-tombos-container {
         overflow-y: scroll;
         background-color: #fff;
         padding: 10px;
         border: 1px solid #dbdbdb;
         border-radius: 5px;
      }

      /* Use height e max-height relativos para manter a proporcionalidade */
      #tombos-container {
         height: 60vh;
         max-height: 60vh;
      }

      #selected-tombos-container {
         height: 20vh;
      }

      .w-90 {
         width: 90% !important;
      }

      body {
         display: flex;
         align-items: center;
      }
   </style>

   <body>

      <%- include('../partials/header') %>

         <div class="caixa w-90 p-4 mx-auto">

            <div class=" border caixa-externa p-4 shadow-sm rounded">

               <div class="row align-items-center mb-3 px-3">
                  <h2 style="border-bottom: 4px solid orange;"
                     class="text-center text-white py-2 mt-0 fw-bold bg-success"> Formulário de Saída </h2>
               </div>

               <div class="row">
                  <!-- Coluna da Esquerda -->
                  <div class="col-md-6">
                     <div id="row2" class="row">
                        <div class="col-md-12">
                           <div id="tombo_div" class="mb-2">
                              <label class="form-label fw-bold">Itens em estoque</label>
                              <div id="tombos-container">
                                 <div style="font-size: 12px;" id="tombos-list" class="form-check">
                                    <% itensDisponiveis.forEach(item=> { %>
                                       <div class="form-check">
                                          <input type="checkbox" class="form-check-input" value="<%= item.tombo %>"
                                             id="tombo-<%= item.tombo %>">
                                          <label class="form-check-label" for="tombo-<%= item.tombo %>">ID: <%= item.id
                                                %> - <%= item.descricao %> - Tombo: <%= item.tombo %></label>
                                       </div>
                                       <% }); %>
                                 </div>
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>

                  <!-- Coluna da Direita -->
                  <div class="col-md-6">
                     <div id="row4" class="row">
                        <div class="col-md-4">
                           <div id="doc_saida-div">
                              <label class="form-label fw-bold">Termo de Responsabilidade</label>
                              <input style="background-color: var(secondary-color) !important;" name="doc_saida"
                                 id="doc_saida" type="text" class="form-control mb-2" readonly>
                           </div>

                        </div>
                        <div class="col-md-4">
                           <div id="referencia-div">
                              <label class="form-label fw-bold">NUP (Suite)</label>
                              <input id="referencia" type="text" class="form-control mb-2">
                           </div>

                        </div>
                        <div class="col-md-4">
                           <div id="destino-div" class="mb-1">
                              <label class="form-label fw-bold">Destino</label>
                              <input id="destino" type="text" class="form-control mb-2">
                           </div>
                        </div>

                     </div>
                     <div id="row5" class="row">
                        <div class="col-md-4">
                           <div id="postoGrad-div" class="mb-1">
                              <label class="form-label fw-bold">Posto/Graduação</label>
                              <select class="form-control mb-2" id="postoGrad">
                                 <option value="">Selecione</option>
                                 <option value="sd">SD.</option>
                                 <option value="cb">CB.</option>
                                 <option value="3sgt">3º SGT.</option>
                                 <option value="2sgt">2º SGT.</option>
                                 <option value="1sgt">1º SGT.</option>
                                 <option value="st">ST.</option>
                                 <option value="2ten">2º TEN.</option>
                                 <option value="1ten">1º TEN.</option>
                                 <option value="cap">CAP.</option>
                                 <option value="maj">MAJ.</option>
                                 <option value="tenCel">TEN. CEL.</option>
                                 <option value="cel">CEL.</option>
                              </select>
                           </div>
                        </div>

                        <div class="col-md-4">
                           <div id="mf_recebedor-div" class="mb-1">
                              <label class="form-label fw-bold">Mat. Funcional</label>
                              <input id="mf_recebedor" type="text" class="form-control mb-2" maxlength="11">
                           </div>
                        </div>

                        <div class="col-md-4">
                           <div id="tel_recebedor-div" class="mb-1">
                              <label class="form-label fw-bold">Telefone</label>
                              <input id="tel_recebedor" type="tel" class="form-control mb-2"
                                 placeholder="somente números">
                           </div>
                        </div>

                        <div class="col-md-12">
                           <div id="nome_do_recebedor-div" class="mb-1">
                              <label class="form-label fw-bold">Nome Completo</label>
                              <input id="nome_do_recebedor" type="text" class="form-control mb-2">
                           </div>
                        </div>
                     </div>

                     <div id="row6" class="row">
                        <div class="col-md-12">
                           <div id="observacao-div" class="mb-1">
                              <label class="form-label fw-bold">Observação</label>
                              <textarea id="observacao" type="text" class="form-control mb-2"></textarea>
                           </div>
                        </div>
                     </div>

                     <div id="row3" class="row">
                        <div class="col-md-12">
                           <div id="itens_selecionados" class="mb-1">
                              <label class="form-label mb-2 fw-bold">Itens a sair do estoque</label>
                              <div id="selected-tombos-container">
                                 <ul id="selected-tombos" class="list-group">
                                    <!-- Itens selecionados serão listados aqui -->
                                 </ul>
                              </div>
                           </div>
                        </div>

                        <div class="d-flex  mt-3 justify-content-around">
                           <button id="submit-btn" type="submit" class="btn btn-success my-3 w-10">Registrar
                              Saída</button>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>

         <!-- Modal de Alerta -->
         <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
            <div class="modal-dialog">
               <div class="modal-content">
                  <div class="modal-header">
                     <h5 class="modal-title" id="errorModalLabel">Erro de Validação</h5>
                     <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                     <p id="errorMessage"></p>
                  </div>
                  <div class="modal-footer">
                     <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                  </div>
               </div>
            </div>
         </div>

         <!-- Scripts necessários para o modal -->
         <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
            integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
            </script>
         <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous">
            </script>

         <!-- Scripts para buscar e registrar saída -->

         <script>
            document.addEventListener('DOMContentLoaded', function () {
               // Adiciona a função para selecionar um intervalo de itens
               function selectRange(start, end) {
                  const checkboxes = document.querySelectorAll("#tombos-list input[type='checkbox']");
                  let inRange = false;
                  checkboxes.forEach(checkbox => {
                     if (checkbox === start || checkbox === end) {
                        inRange = !inRange;
                        checkbox.checked = true;
                        toggleItem(checkbox);
                     } else if (inRange) {
                        checkbox.checked = true;
                        toggleItem(checkbox);
                     }
                  });
               }

               // Função para adicionar ou remover itens selecionados
               function toggleItem(checkbox) {
                  const selectedTombos = document.getElementById("selected-tombos");
                  const item = checkbox.closest("div").querySelector("label").textContent;

                  if (checkbox.checked) {
                     const li = document.createElement("li");
                     li.className = "list-group-item";
                     li.textContent = item;
                     li.id = `selected-${checkbox.value}`;
                     li.style.fontSize = "0.8rem";
                     selectedTombos.appendChild(li);
                  } else {
                     const li = document.getElementById(`selected-${checkbox.value}`);
                     selectedTombos.removeChild(li);
                  }

                  updateResponsibilityTerm();
               }

               // Função para obter o ano atual
               function getCurrentYear() {
                  return new Date().getFullYear();
               }

               // Função para obter o próximo número da sequência
               function getNextSequence(year) {
                  let sequence = localStorage.getItem(`sequence_${year}`);
                  if (!sequence) {
                     sequence = 1;
                  } else {
                     sequence = parseInt(sequence, 10);
                     console.log(`Número atual da sequência para o ano ${year}: ${sequence}`);
                  }
                  return sequence;
               }

               // Função para incrementar e salvar o próximo número da sequência
               function incrementSequence(year) {
                  let sequence = getNextSequence(year) + 1;
                  localStorage.setItem(`sequence_${year}`, sequence);
                  return sequence;
               }

               // Função para formatar a sequência com 5 dígitos
               function formatSequence(sequence) {
                  return String(sequence).padStart(5, '0');
               }

               // Função para gerar o valor do Termo de Responsabilidade sem incrementar a sequência
               function generateResponsibilityTerm() {
                  const year = getCurrentYear();
                  const sequence = getNextSequence(year);
                  const term = `${year}/${formatSequence(sequence)}`;
                  console.log(`Gerando Termo de Responsabilidade: ${term}`);
                  return term;
               }

               // Função para gerar e incrementar o valor do Termo de Responsabilidade
               function generateAndIncrementResponsibilityTerm() {
                  const year = getCurrentYear();
                  const sequence = incrementSequence(year);
                  const term = `${year}/${formatSequence(sequence)}`;
                  console.log(`Gerando e Incrementando Termo de Responsabilidade: ${term}`);
                  return term;
               }

               // Função para atualizar o termo de responsabilidade
               function updateResponsibilityTerm() {
                  const docSaidaInput = document.getElementById('doc_saida');
                  if (isAnyCheckboxChecked()) {
                     const term = generateResponsibilityTerm();
                     docSaidaInput.value = term;
                  } else {
                     docSaidaInput.value = "";
                  }
               }

               // Função para verificar se algum checkbox está marcado
               function isAnyCheckboxChecked() {
                  const checkboxes = document.querySelectorAll('#tombos-list input[type="checkbox"]');
                  for (let checkbox of checkboxes) {
                     if (checkbox.checked) {
                        return true;
                     }
                  }
                  return false;
               }

               // Observe checkboxes for range selection
               const tombosList = document.getElementById("tombos-list");
               let startCheckbox = null;
               tombosList.addEventListener("click", event => {
                  if (event.target.tagName === "INPUT" && event.target.type === "checkbox") {
                     if (startCheckbox && event.shiftKey) {
                        selectRange(startCheckbox, event.target);
                        startCheckbox = null;
                     } else {
                        startCheckbox = event.target;
                     }
                     toggleItem(event.target);
                  }
               });
            });
         </script>

         <script>
            document.getElementById("submit-btn").addEventListener("click", async () => {
               const selectedOptions = Array.from(document.querySelectorAll("#tombos-list input:checked"));
               const tombos = selectedOptions.map(option => option.value);

               if (tombos.length === 0) {
                  showAlert("Selecione ao menos um item para registrar a saída.");
                  return;
               }

               const data = {
                  tombos,
                  doc_saida: document.getElementById("doc_saida").value,
                  referencia: document.getElementById("referencia").value,
                  destino: document.getElementById("destino").value,
                  postoGrad: document.getElementById("postoGrad").value,
                  mf_recebedor: document.getElementById("mf_recebedor").value,
                  tel_recebedor: document.getElementById("tel_recebedor").value,
                  nome_do_recebedor: document.getElementById("nome_do_recebedor").value,
                  observacao: document.getElementById("observacao").value
               };

               console.log("Dados a serem enviados:", data);

               try {
                  const response = await fetch("http://localhost:3030/saida", { // URL do ngrok
                     method: "POST",
                     headers: {
                        "Content-Type": "application/json"
                     },
                     body: JSON.stringify(data)
                  });

                  if (response.ok) {
                     const result = await response.json();
                     console.log("Resposta do servidor:", result);
                     alert(result.message);
                     window.open(result.pdfPath, '_blank');
                     location.reload();
                  } else {
                     const error = await response.json();
                     console.error("Erro na resposta do servidor:", error);
                     showAlert(`Erro ao registrar saída: ${error.error}`);
                  }
               } catch (error) {
                  console.error("Erro ao registrar saída:", error);
               }
            });

            // Função para mostrar alertas
            function showAlert(message) {
               const alertPlaceholder = document.getElementById("errorMessage");
               alertPlaceholder.innerHTML = `
               <div class="alert alert-danger alert-dismissible" role="alert">
                  ${message}
                  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
               </div>
            `;
               let errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
               errorModal.show();
            }

            // Funções adicionais para formatação de telefone, matrícula e referência
            const telefoneInput = document.getElementById('tel_recebedor');
            const matriculaInput = document.getElementById('mf_recebedor');
            const referenciaInput = document.getElementById('referencia');

            telefoneInput.addEventListener('input', (e) => {
               let value = e.target.value.replace(/\D/g, '');
               if (value.length > 11) value = value.slice(0, 11);

               if (value.length > 0) value = `(${value.slice(0, 2)}) ${value.slice(2)}`;
               if (value.length > 3) value = `${value.slice(0, 4)} ${value.slice(4)}`;
               if (value.length > 10) value = `${value.slice(0, 11)}-${value.slice(11)}`;

               e.target.value = value;
            });

            matriculaInput.addEventListener('input', (e) => {
               let value = e.target.value.replace(/[^0-9X]/gi, '');
               let lastChar = value.slice(-1).toUpperCase();

               // Remove qualquer "X" que não seja o último caractere
               value = value.slice(0, -1).replace(/X/gi, '') + lastChar;

               console.log('Valor atual (apenas dígitos e X):', value);

               let bloco1 = value.slice(0, 3);
               let bloco2 = value.slice(3, 6);
               let bloco3 = value.slice(6, 7);
               let bloco4 = value.slice(7, 8);

               console.log('Bloco 1:', bloco1);
               console.log('Bloco 2:', bloco2);
               console.log('Bloco 3:', bloco3);
               console.log('Bloco 4:', bloco4);

               let formattedValue = bloco1;
               if (bloco2) formattedValue += `.${bloco2}`;
               if (bloco3) formattedValue += `-${bloco3}`;
               if (bloco4) {
                  if (lastChar === 'X') {
                     formattedValue += `-${bloco4}`;
                  } else {
                     formattedValue += `-${bloco4}`;
                  }
               } else if (lastChar === 'X') {
                  formattedValue += '-X';
               }

               e.target.value = formattedValue;
               console.log('Valor final formatado:', e.target.value);
            });

            referenciaInput.addEventListener('input', (e) => {
               console.log('Evento de input disparado'); // Log para verificar se o evento é disparado

               let value = e.target.value.replace(/\D/g, ''); // Remove todos os caracteres que não são dígitos
               console.log('Valor após remoção de não dígitos:', value); // Log para verificar o valor atual

               if (value.length > 20) value = value.slice(0, 20); // Limita o comprimento do valor a 20 caracteres
               console.log('Valor após limitar comprimento:', value); // Log para verificar o valor após limitação

               let nup = value.slice(0, 5);
               let bloco1 = value.slice(5, 11);
               let ano = value.slice(11, 15);
               let seq = value.slice(15, 17);

               console.log('NUP:', nup);
               console.log('Bloco 1:', bloco1);
               console.log('Ano:', ano);
               console.log('Seq:', seq);

               let formattedValue = `NUP ${nup}`;
               if (bloco1) formattedValue += `.${bloco1}`;
               if (ano) formattedValue += `/${ano}`;
               if (seq) formattedValue += `-${seq}`;

               console.log('Valor formatado:', formattedValue); // Log para verificar o valor final formatado

               e.target.value = formattedValue; // Define o valor formatado no input
            });
         </script>
   </body>
</html>