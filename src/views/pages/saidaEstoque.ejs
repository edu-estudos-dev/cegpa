<!DOCTYPE html>
<html lang="pt-BR">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Formulário de Saída</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <script defer src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <link rel="stylesheet" href="/css/styles.css">
</head>

<body>

  <!-- Navbar -->
  <%- include('../partials/header') %>

    <div id="centralize-wrapper" class="centralize-wrapper">
      <div id="container" class="container secondary-color centralize border shadow-sm">
        <main>
          <div class="row align-items-center mb-3">
            <h1 class="text-center text-success mb-3 fw-bold display-6">Formulário de Saída</h1>
          </div>

          <div class="row">
            <!-- Coluna da Esquerda -->
            <div class="col-md-6">
              <div id="row2" class="row">
                <div class="col-md-12">
                  <div id="tombo_div" class="mb-3">
                    <label class="form-label fw-bold">Tombos Disponíveis</label>
                    <div id="tombos-container">
                      <div style="font-size: 12px;" id="tombos-list" class="form-check">
                        <!-- Checkboxes serão preenchidos via JavaScript -->
                      </div>
                    </div>
                  </div>
                </div>
              </div>


            </div>

            <!-- Coluna da Direita -->
            <div class="col-md-6">
              <div id="row4" class="row">
                <div class="col-md-4">
                  <div id="doc_saida-div" class="mb-3">
                    <label class="form-label fw-bold">Termo de Responsabilidade</label>
                    <input style="background-color: var(secondary-color) !important;" id="doc_saida" type="text"
                      class="form-control">
                  </div>

                </div>
                <div class="col-md-4">
                  <div id="referencia-div" class="mb-3">
                    <label class="form-label fw-bold">Referência</label>
                    <input id="referencia" type="text" class="form-control">
                  </div>

                </div>
                <div class="col-md-4">
                  <div id="destino-div" class="mb-3">
                    <label class="form-label fw-bold">Destino</label>
                    <input id="destino" type="text" class="form-control">
                  </div>
                </div>

              </div>
              <div id="row5" class="row">
                <div class="col-md-4">
                  <div id="postoGrad-div" class="mb-3">
                    <label class="form-label fw-bold">Posto/Graduação</label>
                    <select class="form-control" id="postoGrad">
                      <option value="">Selecione</option>
                      <option value="sd">SD.</option>
                      <option value="cb">CB.</option>
                      <option value="3sgt">3º SGT.</option>
                      <option value="2sgt">2º SGT.</option>
                      <option value="1sgt">1º SGT.</option>
                      <option value="st">ST.</option>
                      <option value="2ten">2º TEN.</option>
                      <option value="1ten">1º TEN.</option>
                      <option value="cap">CAP.</option>
                      <option value="maj">MAJ.</option>
                      <option value="tenCel">TEN. CEL.</option>
                      <option value="cel">CEL.</option>
                    </select>
                  </div>
                </div>

                <div class="col-md-4">
                  <div id="mf_recebedor-div" class="mb-3">
                    <label class="form-label fw-bold">Mat. Funcional</label>
                    <input id="mf_recebedor" type="text" class="form-control" maxlength="11">
                  </div>
                </div>

                <div class="col-md-4">
                  <div id="tel_recebedor-div" class="mb-3">
                    <label class="form-label fw-bold">Telefone</label>
                    <input id="tel_recebedor" type="tel" class="form-control" placeholder="somente números">
                  </div>
                </div>

                <div class="col-md-12">
                  <div id="nome_do_recebedor-div" class="mb-3">
                    <label class="form-label fw-bold">Nome Completo</label>
                    <input id="nome_do_recebedor" type="text" class="form-control">
                  </div>
                </div>
              </div>

              <div id="row6" class="row">
                <div class="col-md-12">
                  <div id="observacao-div" class="mb-3">
                    <label class="form-label fw-bold">Observação</label>
                    <textarea id="observacao" type="text" class="form-control"></textarea>
                  </div>
                </div>
              </div>

              <div id="row3" class="row">
                <div class="col-md-12">
                  <div id="itens_selecionados" class="mb-3">
                    <label class="form-label fw-bold">Itens a sair do estoque</label>
                    <div style="font-size: 11px;" id="selected-tombos-container">
                      <ul id="selected-tombos" class="list-group">
                        <!-- Itens selecionados serão listados aqui -->
                      </ul>
                    </div>
                  </div>
                </div>
              </div>

            </div>
            <div class="d-flex justify-content-around mt-3">
              <button id="submit-btn" type="submit" class="btn btn-success w-10">Registrar Saída</button>
            </div>
          </div>
        </main>
      </div>
    </div>


    <!-- Modal de Alerta -->
    <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="errorModalLabel">Erro de Validação</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p id="errorMessage"></p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
          </div>
        </div>
      </div>
    </div>
    <!-- Scripts necessários para o modal -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
      integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
      </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous">
      </script>

    <!-- Scripts para buscar e registrar saída -->
    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        try {
          const response = await fetch("http://localhost:3030/api/itens-disponiveis"); // Certifique-se de usar a porta correta
          console.log("Resposta da API:", response);

          if (response.ok) {
            const itens = await response.json();
            console.log("Itens recebidos:", itens);

            const tombosList = document.getElementById("tombos-list");
            const selectedTombos = document.getElementById("selected-tombos");

            itens.forEach(item => {
              const div = document.createElement("div");
              div.className = "form-check";

              const checkbox = document.createElement("input");
              checkbox.type = "checkbox";
              checkbox.className = "form-check-input";
              checkbox.value = item.tombo;
              checkbox.id = `tombo-${item.tombo}`;
              checkbox.addEventListener("change", () => {
                if (checkbox.checked) {
                  const li = document.createElement("li");
                  li.className = "list-group-item";
                  li.textContent = `${item.descricao} - Tombo: ${item.tombo}`;
                  li.id = `selected-${item.tombo}`;
                  selectedTombos.appendChild(li);
                } else {
                  const li = document.getElementById(`selected-${item.tombo}`);
                  selectedTombos.removeChild(li);
                }
              });

              const label = document.createElement("label");
              label.className = "form-check-label";
              label.htmlFor = `tombo-${item.tombo}`;
              label.textContent = `${item.descricao} - Tombo: ${item.tombo}`;

              div.appendChild(checkbox);
              div.appendChild(label);
              tombosList.appendChild(div);
            });
          } else {
            console.error("Erro na resposta da API:", await response.text());
          }
        } catch (error) {
          console.error("Erro ao buscar itens disponíveis:", error);
        }
      });


      document.getElementById("submit-btn").addEventListener("click", async () => {
        const selectedOptions = Array.from(document.querySelectorAll("#tombos-list input:checked"));
        const tombos = selectedOptions.map(option => option.value);

        if (tombos.length === 0) {
          showAlert("Selecione ao menos um item para registrar a saída.");
          return;
        }

        const data = {
          tombos,
          doc_saida: document.getElementById("doc_saida").value,
          referencia: document.getElementById("referencia").value,
          destino: document.getElementById("destino").value,
          postoGrad: document.getElementById("postoGrad").value,
          mf_recebedor: document.getElementById("mf_recebedor").value,
          tel_recebedor: document.getElementById("tel_recebedor").value,
          nome_do_recebedor: document.getElementById("nome_do_recebedor").value,
          observacao: document.getElementById("observacao").value
        };

        // Log dos dados que serão enviados
        console.log("Dados a serem enviados:", data);

        try {
          const response = await fetch("http://localhost:6060/saida", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
          });

          if (response.ok) {
            const result = await response.json();
            console.log("Resposta do servidor:", result);
            alert(result.message);
            window.open(result.pdfPath, '_blank');
            location.reload();
          } else {
            const error = await response.json();
            console.error("Erro na resposta do servidor:", error);
            showAlert(`Erro ao registrar saída: ${error.error}`);
          }
        } catch (error) {
          console.error("Erro ao registrar saída:", error);
        }
      });

      // Função para mostrar alertas
      function showAlert(message) {
        const alertPlaceholder = document.getElementById("errorMessage");
        alertPlaceholder.innerHTML = `
        <div class="alert alert-danger alert-dismissible" role="alert">
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      `;
        var errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
        errorModal.show();
      }

      document.addEventListener('DOMContentLoaded', () => {
        const telefoneInput = document.getElementById('tel_recebedor');
        const matriculaInput = document.getElementById('mf_recebedor');

        telefoneInput.addEventListener('input', (e) => {
          let value = e.target.value.replace(/\D/g, '');
          if (value.length > 11) value = value.slice(0, 11);

          if (value.length > 0) value = `(${value.slice(0, 2)}) ${value.slice(2)}`;
          if (value.length > 3) value = `${value.slice(0, 4)} ${value.slice(4)}`;
          if (value.length > 10) value = `${value.slice(0, 10)}-${value.slice(10)}`;

          e.target.value = value;
        });

        matriculaInput.addEventListener('input', (e) => {
          let value = e.target.value.replace(/\D/g, '');
          console.log('Valor atual (apenas dígitos):', value);

          let bloco1 = value.slice(0, 3);
          let bloco2 = value.slice(3, 6);
          let bloco3 = value.slice(6, 7);
          let bloco4 = value.slice(7, 8);

          console.log('Bloco 1:', bloco1);
          console.log('Bloco 2:', bloco2);
          console.log('Bloco 3:', bloco3);
          console.log('Bloco 4:', bloco4);

          let formattedValue = bloco1;
          if (bloco2) formattedValue += `.${bloco2}`;
          if (bloco3) formattedValue += `-${bloco3}`;
          if (bloco4) formattedValue += `-${bloco4}`;

          e.target.value = formattedValue;
          console.log('Valor final formatado:', e.target.value);
        });
      });


      document.addEventListener('DOMContentLoaded', function () {

        // Função para obter o ano atual
        function getCurrentYear() {
          return new Date().getFullYear();
        }

        // Função para obter o próximo número da sequência
        function getNextSequence(year) {
          let sequence = localStorage.getItem(`sequence_${year}`);
          if (!sequence) {
            sequence = 1;
          } else {
            sequence = parseInt(sequence, 10);
            console.log(`Número atual da sequência para o ano ${year}: ${sequence}`);
          }
          return sequence;
        }

        // Função para incrementar e salvar o próximo número da sequência
        function incrementSequence(year) {
          let sequence = getNextSequence(year) + 1;
          localStorage.setItem(`sequence_${year}`, sequence);
          return sequence;
        }

        // Função para formatar a sequência com 5 dígitos
        function formatSequence(sequence) {
          return String(sequence).padStart(5, '0');
        }

        // Função para gerar o valor do Termo de Responsabilidade sem incrementar a sequência
        function generateResponsibilityTerm() {
          const year = getCurrentYear();
          const sequence = getNextSequence(year);
          const term = `${year}/${formatSequence(sequence)}`;
          console.log(`Gerando Termo de Responsabilidade: ${term}`);
          return term;
        }

        // Função para gerar e incrementar o valor do Termo de Responsabilidade
        function generateAndIncrementResponsibilityTerm() {
          const year = getCurrentYear();
          const sequence = incrementSequence(year);
          const term = `${year}/${formatSequence(sequence)}`;
          console.log(`Gerando e Incrementando Termo de Responsabilidade: ${term}`);
          return term;
        }

        // Função para verificar se algum checkbox está marcado
        function isAnyCheckboxChecked() {
          const checkboxes = document.querySelectorAll('#tombos-list input[type="checkbox"]');
          for (let checkbox of checkboxes) {
            if (checkbox.checked) {
              return true;
            }
          }
          return false;
        }

        // Observa mudanças nos checkboxes
        function observeCheckboxes() {
          const checkboxes = document.querySelectorAll('#tombos-list input[type="checkbox"]');
          checkboxes.forEach(function (checkbox) {
            checkbox.addEventListener('change', function () {
              if (isAnyCheckboxChecked()) {
                const term = generateResponsibilityTerm();
                document.getElementById('doc_saida').value = term;
              }
            });
          });
        }

        // Observa submissão do formulário
        document.getElementById('submit-btn').addEventListener('click', function (event) {
          if (isAnyCheckboxChecked()) {
            const term = generateAndIncrementResponsibilityTerm();
            document.getElementById('doc_saida').value = term;
          } else {
          }
        });

        // Chama a função para observar os checkboxes após o carregamento inicial da página
        observeCheckboxes();

        // Observar DOM para novos checkboxes sendo adicionados
        const observer = new MutationObserver(function (mutationsList, observer) {
          observeCheckboxes();
        });

        observer.observe(document.getElementById('tombos-list'), { childList: true, subtree: true });
      });


    </script>
</body>

</html>